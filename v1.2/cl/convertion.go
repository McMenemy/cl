package cl

import (
	"log"
	"reflect"
	"strings"
	"unsafe"
)

var errormap map[ErrorCode]string

func init() {
	errormap = make(map[ErrorCode]string)
	errormap[SUCCESS] = "SUCCESS"
	errormap[DEVICE_NOT_FOUND] = "DEVICE_NOT_FOUND"
	errormap[DEVICE_NOT_AVAILABLE] = "DEVICE_NOT_AVAILABLE"
	errormap[COMPILER_NOT_AVAILABLE] = "COMPILER_NOT_AVAILABLE"
	errormap[MEM_OBJECT_ALLOCATION_FAILURE] = "MEM_OBJECT_ALLOCATION_FAILURE"
	errormap[OUT_OF_RESOURCES] = "OUT_OF_RESOURCES"
	errormap[OUT_OF_HOST_MEMORY] = "OUT_OF_HOST_MEMORY"
	errormap[PROFILING_INFO_NOT_AVAILABLE] = "PROFILING_INFO_NOT_AVAILABLE"
	errormap[MEM_COPY_OVERLAP] = "MEM_COPY_OVERLAP"
	errormap[IMAGE_FORMAT_MISMATCH] = "IMAGE_FORMAT_MISMATCH"
	errormap[IMAGE_FORMAT_NOT_SUPPORTED] = "IMAGE_FORMAT_NOT_SUPPORTED"
	errormap[BUILD_PROGRAM_FAILURE] = "BUILD_PROGRAM_FAILURE"
	errormap[MAP_FAILURE] = "MAP_FAILURE"
	errormap[MISALIGNED_SUB_BUFFER_OFFSET] = "MISALIGNED_SUB_BUFFER_OFFSET"
	errormap[EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST] = "EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST"
	errormap[COMPILE_PROGRAM_FAILURE] = "COMPILE_PROGRAM_FAILURE"
	errormap[LINKER_NOT_AVAILABLE] = "LINKER_NOT_AVAILABLE"
	errormap[LINK_PROGRAM_FAILURE] = "LINK_PROGRAM_FAILURE"
	errormap[DEVICE_PARTITION_FAILED] = "DEVICE_PARTITION_FAILED"
	errormap[KERNEL_ARG_INFO_NOT_AVAILABLE] = "KERNEL_ARG_INFO_NOT_AVAILABLE"
	errormap[INVALID_VALUE] = "INVALID_VALUE"
	errormap[INVALID_DEVICE_TYPE] = "INVALID_DEVICE_TYPE"
	errormap[INVALID_PLATFORM] = "INVALID_PLATFORM"
	errormap[INVALID_DEVICE] = "INVALID_DEVICE"
	errormap[INVALID_CONTEXT] = "INVALID_CONTEXT"
	errormap[INVALID_QUEUE_PROPERTIES] = "INVALID_QUEUE_PROPERTIES"
	errormap[INVALID_COMMAND_QUEUE] = "INVALID_COMMAND_QUEUE"
	errormap[INVALID_HOST_PTR] = "INVALID_HOST_PTR"
	errormap[INVALID_MEM_OBJECT] = "INVALID_MEM_OBJECT"
	errormap[INVALID_IMAGE_FORMAT_DESCRIPTOR] = "INVALID_IMAGE_FORMAT_DESCRIPTOR"
	errormap[INVALID_IMAGE_SIZE] = "INVALID_IMAGE_SIZE"
	errormap[INVALID_SAMPLER] = "INVALID_SAMPLER"
	errormap[INVALID_BINARY] = "INVALID_BINARY"
	errormap[INVALID_BUILD_OPTIONS] = "INVALID_BUILD_OPTIONS"
	errormap[INVALID_PROGRAM] = "INVALID_PROGRAM"
	errormap[INVALID_PROGRAM_EXECUTABLE] = "INVALID_PROGRAM_EXECUTABLE"
	errormap[INVALID_KERNEL_NAME] = "INVALID_KERNEL_NAME"
	errormap[INVALID_KERNEL_DEFINITION] = "INVALID_KERNEL_DEFINITION"
	errormap[INVALID_KERNEL] = "INVALID_KERNEL"
	errormap[INVALID_ARG_INDEX] = "INVALID_ARG_INDEX"
	errormap[INVALID_ARG_VALUE] = "INVALID_ARG_VALUE"
	errormap[INVALID_ARG_SIZE] = "INVALID_ARG_SIZE"
	errormap[INVALID_KERNEL_ARGS] = "INVALID_KERNEL_ARGS"
	errormap[INVALID_WORK_DIMENSION] = "INVALID_WORK_DIMENSION"
	errormap[INVALID_WORK_GROUP_SIZE] = "INVALID_WORK_GROUP_SIZE"
	errormap[INVALID_WORK_ITEM_SIZE] = "INVALID_WORK_ITEM_SIZE"
	errormap[INVALID_GLOBAL_OFFSET] = "INVALID_GLOBAL_OFFSET"
	errormap[INVALID_EVENT_WAIT_LIST] = "INVALID_EVENT_WAIT_LIST"
	errormap[INVALID_EVENT] = "INVALID_EVENT"
	errormap[INVALID_OPERATION] = "INVALID_OPERATION"
	errormap[INVALID_GL_OBJECT] = "INVALID_GL_OBJECT"
	errormap[INVALID_BUFFER_SIZE] = "INVALID_BUFFER_SIZE"
	errormap[INVALID_MIP_LEVEL] = "INVALID_MIP_LEVEL"
	errormap[INVALID_GLOBAL_WORK_SIZE] = "INVALID_GLOBAL_WORK_SIZE"
	errormap[INVALID_PROPERTY] = "INVALID_PROPERTY"
	errormap[INVALID_IMAGE_DESCRIPTOR] = "INVALID_IMAGE_DESCRIPTOR"
	errormap[INVALID_COMPILER_OPTIONS] = "INVALID_COMPILER_OPTIONS"
	errormap[INVALID_LINKER_OPTIONS] = "INVALID_LINKER_OPTIONS"
	errormap[INVALID_DEVICE_PARTITION_COUNT] = "INVALID_DEVICE_PARTITION_COUNT"
}

func Str(str string) *uint8 {
	if !strings.HasSuffix(str, "\x00") {
		log.Fatal("str argument missing null terminator", str)
	}
	header := (*reflect.StringHeader)(unsafe.Pointer(&str))
	return (*uint8)(unsafe.Pointer(header.Data))
}

func ErrToStr(e ErrorCode) string {
	return errormap[e]
}
